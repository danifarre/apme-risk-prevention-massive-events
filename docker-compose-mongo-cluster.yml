services:

  #########
  # Kafka #
  #########

  controller-1:
    image: apache/kafka:3.9.0
    container_name: controller-1
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  controller-2:
    image: apache/kafka:3.9.0
    container_name: controller-2
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  controller-3:
    image: apache/kafka:3.9.0
    container_name: controller-3
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  broker-1:
    image: apache/kafka:3.9.0
    container_name: broker-1
    ports:
      - 29092:9092
    environment:
      KAFKA_NODE_ID: 4
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker-1:19092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@controller-1:9093,2@controller-2:9093,3@controller-3:9093'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - controller-1
      - controller-2
      - controller-3

  broker-2:
    image: apache/kafka:3.9.0
    container_name: broker-2
    ports:
      - 39092:9092
    environment:
      KAFKA_NODE_ID: 5
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker-2:19092,PLAINTEXT_HOST://localhost:39092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@controller-1:9093,2@controller-2:9093,3@controller-3:9093'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - controller-1
      - controller-2
      - controller-3

  broker-3:
    image: apache/kafka:3.9.0
    container_name: broker-3
    ports:
      - 49092:9092
    environment:
      KAFKA_NODE_ID: 6
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker-3:19092,PLAINTEXT_HOST://localhost:49092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@controller-1:9093,2@controller-2:9093,3@controller-3:9093'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - controller-1
      - controller-2
      - controller-3

  create-kafka-topics:
    image: python:3.12.10
    container_name: create-kafka-topics
    volumes:
      - ./kafka:/app
      - ./influxdb/wait-for-it.sh:/wait-for-it.sh:ro
    working_dir: /app
    depends_on:
      - controller-1
      - controller-2
      - controller-3
      - broker-1
      - broker-2
      - broker-3
    restart: no
    command: >
        bash -c "/wait-for-it.sh broker-1:19092 -- sh -c 'pip install kafka-python && python create_topics.py'"

  ############
  # Influxdb #
  ############

  influxdb:
    image: influxdb:2.7.11
    container_name: influxdb
    ports:
      - '8086:8086'
    environment:
      DOCKER_INFLUXDB_INIT_MODE: 'setup'
      DOCKER_INFLUXDB_INIT_USERNAME: 'admin'
      DOCKER_INFLUXDB_INIT_PASSWORD: 'mysecretpassword'
      DOCKER_INFLUXDB_INIT_ORG: 'apme'
      DOCKER_INFLUXDB_INIT_BUCKET: 'apme'
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: 'dev'

  influxdb-init:
    image: influxdb:2.7.11
    depends_on:
      - influxdb
    volumes:
      - ./influxdb/wait-for-it.sh:/wait-for-it.sh:ro
    entrypoint: >
      /bin/sh -c "
      /wait-for-it.sh influxdb:8086 --strict -- \
      influx bucket create --name devices_info --org apme --token dev --host http://influxdb:8086;
      influx bucket create --name users_analytics --org apme --token dev --host http://influxdb:8086;
      exit 0;"

  telegraf:
    image: telegraf:1.34.1
    container_name: telegraf
    volumes:
      - ./influxdb/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - ./influxdb/wait-for-it.sh:/wait-for-it.sh:ro
    depends_on:
      influxdb:
        condition: service_started
      create-kafka-topics:
        condition: service_completed_successfully
    command: [ "bash", "-c", "/wait-for-it.sh broker-1:19092 -- telegraf --config /etc/telegraf/telegraf.conf" ]

  ###########
  # Grafana #
  ###########

  grafana:
    image: grafana/grafana:11.6.0
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/grafana-data:/var/lib/grafana

  ###########
  # MongoDB #
  ###########

  # Config Servers
  config1:
    image: mongo:8.0.6
    container_name: config1
    command: mongod --configsvr --replSet configReplSet --port 27019

    ports:
      - 27019:27019

  config2:
    image: mongo:8.0.6
    container_name: config2
    command: mongod --configsvr --replSet configReplSet --port 27019

  config3:
    image: mongo:8.0.6
    container_name: config3
    command: mongod --configsvr --replSet configReplSet --port 27019

  # Shard 1
  shard1:
    image: mongo:8.0.6
    container_name: shard1
    command: mongod --shardsvr --replSet shard1ReplSet --port 27018
    ports:
      - 27018:27018

  # Shard 2
  shard2:
    image: mongo:8.0.6
    container_name: shard2
    command: mongod --shardsvr --replSet shard2ReplSet --port 27018

  # Shard 3
  shard3:
    image: mongo:8.0.6
    container_name: shard3
    command: mongod --shardsvr --replSet shard3ReplSet --port 27018

  # Mongos Routers
  mongos1:
    image: mongo:8.0.6
    container_name: mongos1
    depends_on:
      - config1
      - config2
      - config3
    command: >
      bash -c "
      sleep 10 &&
      mongos --configdb configReplSet/config1:27019,config2:27019,config3:27019 --bind_ip_all"
    ports:
      - 27017:27017

  mongos2:
    image: mongo:8.0.6
    container_name: mongos2
    depends_on:
      - config1
      - config2
      - config3
    command: >
      bash -c "
      sleep 10 &&
      mongos --configdb configReplSet/config1:27019,config2:27019,config3:27019 --bind_ip_all"
    ports:
      - 27020:27017

  mongos3:
    image: mongo:8.0.6
    container_name: mongos3
    depends_on:
      - config1
      - config2
      - config3
    command: >
      bash -c "
      sleep 10 &&
      mongos --configdb configReplSet/config1:27019,config2:27019,config3:27019 --bind_ip_all"
    ports:
      - 27021:27017

  # Inicialización del clúster
  init-mongo:
    image: mongo:8.0.6
    container_name: init-mongo
    depends_on:
      - mongos1
      - mongos2
      - mongos3
      - shard1
      - shard2
      - shard3
    volumes:
      - ./influxdb/wait-for-it.sh:/wait-for-it.sh
    entrypoint: >
      bash -c "
      chmod +x /wait-for-it.sh &&

      /wait-for-it.sh config1:27019 --timeout=60 --strict &&
      /wait-for-it.sh config2:27019 --timeout=60 --strict &&
      /wait-for-it.sh config3:27019 --timeout=60 --strict &&

      mongosh --host config1:27019 --eval '
        rs.initiate({_id: \"configReplSet\", configsvr: true, members: [
          {_id: 0, host: \"config1:27019\"},
          {_id: 1, host: \"config2:27019\"},
          {_id: 2, host: \"config3:27019\"}
        ]})' &&

      /wait-for-it.sh shard1:27018 --timeout=60 --strict &&
      /wait-for-it.sh shard2:27018 --timeout=60 --strict &&
      /wait-for-it.sh shard3:27018 --timeout=60 --strict &&

      mongosh --host shard1:27018 --eval '
        rs.initiate({_id: \"shard1ReplSet\", members: [
          {_id: 0, host: \"shard1:27018\"}
        ]})' &&

      mongosh --host shard2:27018 --eval '
        rs.initiate({_id: \"shard2ReplSet\", members: [
          {_id: 0, host: \"shard2:27018\"}
        ]})' &&

      mongosh --host shard3:27018 --eval '
        rs.initiate({_id: \"shard3ReplSet\", members: [
          {_id: 0, host: \"shard3:27018\"}
        ]})' &&

      /wait-for-it.sh mongos1:27017 --timeout=60 --strict &&

      mongosh --host mongos1:27017 --eval '
        sh.addShard(\"shard1ReplSet/shard1:27018\");
        sh.addShard(\"shard2ReplSet/shard2:27018\");
        sh.addShard(\"shard3ReplSet/shard3:27018\");
        sh.enableSharding(\"users_info\");
        db = db.getSiblingDB(\"users_info\");
        db.createCollection(\"info\");
        sh.shardCollection(\"users_info.info\", { _id: 1 });' &&

      echo 'Clúster y colección shardeada inicializados.'
      "
    restart: "no"


  ###########################
  # Kafka Connect (MongoDB) #
  ###########################

  kafka-connect-1:
    image: confluentinc/cp-kafka-connect:7.0.1
    container_name: kafka-connect-1
    depends_on:
      - broker-1
      - broker-2
      - broker-3
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker-1:19092,broker-2:19092,broker-3:19092"
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect-1"
      CONNECT_GROUP_ID: "kafka-connect-group"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/etc/kafka-connect/jars"
    volumes:
      - ./kafka-connect-plugins:/etc/kafka-connect/jars

  kafka-connect-2:
    image: confluentinc/cp-kafka-connect:7.0.1
    container_name: kafka-connect-2
    depends_on:
      - broker-1
      - broker-2
      - broker-3
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker-1:19092,broker-2:19092,broker-3:19092"
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect-2"
      CONNECT_GROUP_ID: "kafka-connect-group"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/etc/kafka-connect/jars"
    volumes:
      - ./kafka-connect-plugins:/etc/kafka-connect/jars

  kafka-connect-3:
    image: confluentinc/cp-kafka-connect:7.0.1
    container_name: kafka-connect-3
    depends_on:
      - broker-1
      - broker-2
      - broker-3
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker-1:19092,broker-2:19092,broker-3:19092"
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect-3"
      CONNECT_GROUP_ID: "kafka-connect-group"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/etc/kafka-connect/jars"
    volumes:
      - ./kafka-connect-plugins:/etc/kafka-connect/jars

  create-mongodb-sink:
    image: debian:bookworm-slim
    container_name: create-mongodb-sink
    volumes:
      - ./kafka-connect-plugins/mongodb-sink-connector-mongo-cluster.json:/config/mongodb-sink-connector.json:ro
      - ./influxdb/wait-for-it.sh:/wait-for-it.sh:ro
    depends_on:
      - kafka-connect-1
      - kafka-connect-2
      - kafka-connect-3
      - init-mongo
    restart: no
    command: >
      bash -c "
      apt update && apt install -y curl &&
      /wait-for-it.sh mongos1:27017 --timeout=60 --strict &&
      /wait-for-it.sh kafka-connect-1:8083 --timeout=60 --strict &&
      sleep 5 &&
      curl -X POST http://kafka-connect-1:8083/connectors \
      -H 'Content-Type: application/json' \
      -d @/config/mongodb-sink-connector.json"

  #########
  # Spark #
  #########

  spark-master:
    image: bitnami/spark:3.5.3
    hostname: spark-master
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master

  spark-worker-1:
    image: bitnami/spark:3.5.3
    hostname: spark-worker-1
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=4
      - SPARK_WORKER_MEMORY=4g

  spark-worker-2:
    image: bitnami/spark:3.5.3
    hostname: spark-worker-2
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=4
      - SPARK_WORKER_MEMORY=4g

  spark-worker-3:
    image: bitnami/spark:3.5.3
    hostname: spark-worker-3
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=4
      - SPARK_WORKER_MEMORY=4g

  spark-client-user-count:
    image: bitnami/spark:3.5.3
    hostname: spark-client-user-count
    depends_on:
      - spark-master
    volumes:
      - ./influxdb/wait-for-it.sh:/wait-for-it.sh:ro
      - ./spark/scripts/count_users.py:/opt/spark/app/count_users.py
    command: >
      bash -c "/wait-for-it.sh spark-master:7077 -- 
      /opt/bitnami/spark/bin/spark-submit --master spark://spark-master:7077 
      --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0 /opt/spark/app/count_users.py"

  spark-client-user-count-zone:
    image: bitnami/spark:3.5.3
    hostname: spark-client-user-count-zone
    depends_on:
      - spark-master
    volumes:
      - ./influxdb/wait-for-it.sh:/wait-for-it.sh:ro
      - ./spark/scripts/count_users_per_zone.py:/opt/spark/app/count_users_per_zone.py
    command: >
      bash -c "/wait-for-it.sh spark-master:7077 -- 
      /opt/bitnami/spark/bin/spark-submit --master spark://spark-master:7077
      --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0 /opt/spark/app/count_users_per_zone.py"

  spark-client-falls-detector:
    image: bitnami/spark:3.5.3
    hostname: spark-client-user-count-zone
    depends_on:
      - spark-master
    volumes:
      - ./influxdb/wait-for-it.sh:/wait-for-it.sh:ro
      - ./spark/scripts/falls_detector.py:/opt/spark/app/falls_detector.py
    command: >
      bash -c "/wait-for-it.sh spark-master:7077 -- 
      /opt/bitnami/spark/bin/spark-submit --master spark://spark-master:7077
      --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0 /opt/spark/app/falls_detector.py"
